<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.EConnectionType
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.IConnectionCategory
    java.util.List
    java.util.Map
"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

String sDataset = ElementParameterParser.getValue(node, "__DATASET_LIST__");
String sSparqlEndpoint = "";

String sQuery = ElementParameterParser.getValue(node, "__QUERY__");
sQuery = sQuery.replaceAll("\n", " ");

String sDisplayUrl = ElementParameterParser.getValue(node, "__CHECK_DISPLAY_URL__");


if (sDataset.equals("reactome"))
{
	sSparqlEndpoint = ElementParameterParser.getValue(node, "__REACTOME_ENDPOINT__");
}
else if (sDataset.equals("atlas"))
{
	sSparqlEndpoint = ElementParameterParser.getValue(node, "__ATLAS_ENDPOINT__");
}
else if (sDataset.equals("biosamples"))
{
	sSparqlEndpoint = ElementParameterParser.getValue(node, "__BIOSAMPLES_ENDPOINT__");
}
else if (sDataset.equals("biomodels"))
{
	sSparqlEndpoint = ElementParameterParser.getValue(node, "__BIOMODELS_ENDPOINT__");
}
else if (sDataset.equals("chembl"))
{
	sSparqlEndpoint = ElementParameterParser.getValue(node, "__CHEMBL_ENDPOINT__");
}

%>

String parametersString_<%=cid%> = "";

<%
List<Map<String, String>> urlParametersList = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__URL_PARAMETERS__");
if(urlParametersList != null && urlParametersList.size() > 0) 
{
	int i = 0;
	for(Map<String,String> urlParameter : urlParametersList) 
	{            
%>
		parametersString_<%=cid%> = parametersString_<%=cid%> + "&" + <%=urlParameter.get("KEY")%> + "=" + <%=urlParameter.get("VALUE")%>;
<%
    }
}
%>

String URL_string_<%=cid%> = <%=sSparqlEndpoint%>;
if (URL_string_<%=cid%>.contains("ebi.ac.uk/rdf/services/"))
{
	URL_string_<%=cid%> = URL_string_<%=cid%>.replaceAll("/sparql.*", "/servlet/query");
}
URL_string_<%=cid%> = URL_string_<%=cid%> + "?query=" + java.net.URLEncoder.encode(<%=sQuery%>, "UTF-8") + "&format=JSON" + parametersString_<%=cid%>;


<%
if (sDisplayUrl.equals("true"))
{
%>
	System.out.println(URL_string_<%=cid%>);
<%
}
%>


<%
///// Construct the HTTP request
%>

java.net.URL url_<%=cid%> = new java.net.URL(URL_string_<%=cid%>);

java.net.HttpURLConnection urlConn_<%=cid%> = (java.net.HttpURLConnection) url_<%=cid%>.openConnection();
urlConn_<%=cid%>.setRequestMethod("GET");
urlConn_<%=cid%>.setDoOutput(true);
urlConn_<%=cid%>.setDoInput(true);
urlConn_<%=cid%>.setUseCaches(false);

urlConn_<%=cid%>.connect();

<%
////////// Get the response from an Input Stream and convert it to a string
%>

byte[] buffer_<%=cid%> = new byte[1024];
int bos_buffer_<%=cid%> = 0;

StringBuilder sb_<%=cid%>=new StringBuilder(); 


if (java.net.HttpURLConnection.HTTP_OK == (urlConn_<%=cid%>.getResponseCode()))
{
	java.io.InputStream bis_<%=cid%> = new java.io.BufferedInputStream(urlConn_<%=cid%>.getInputStream());
	<%// Get the input stream containing the request response 

	// The inputstream is read table of bytes by table of bytes (table of bytes = buffer_cid)	
	// bos_buffer_cid is the byte table size
	%>
	while ((bos_buffer_<%=cid%> = bis_<%=cid%>.read(buffer_<%=cid%>)) != -1)
	{
		// Then the table of bytes and its size are used to generate a string
		// which is added to a string builder that will contain the whole response
		sb_<%=cid%>.append(new String(buffer_<%=cid%>,0,bos_buffer_<%=cid%>));
	}
	bis_<%=cid%>.close();
	
} else {
	System.err.println(urlConn_<%=cid%>.getResponseCode() + " " + urlConn_<%=cid%>.getResponseMessage());
}

urlConn_<%=cid%>.disconnect();

<%
/////////// Parse the JSON object
%>

java.util.ArrayList<String> queryKeys_<%=cid%> = new java.util.ArrayList<String>();
	// ArrayList that contain the key value of the query sorted correctly

org.json.JSONObject jsonObj_<%=cid%> = new org.json.JSONObject(sb_<%=cid%>.toString());

org.json.JSONArray jsonKeysArray_<%=cid%> = jsonObj_<%=cid%>.getJSONObject("head").getJSONArray("vars");
for (int k_<%=cid%> = 0; k_<%=cid%> < jsonKeysArray_<%=cid%>.length(); k_<%=cid%>++)
{
	queryKeys_<%=cid%>.add(jsonKeysArray_<%=cid%>.getString(k_<%=cid%>));
}

java.util.Iterator<String> queryKeysIterator_<%=cid%>;
int i_<%=cid%>;
int nb_line_<%=cid %> = 0;

org.json.JSONArray jsonArray_<%=cid%> = jsonObj_<%=cid%>.getJSONObject("results").getJSONArray("bindings");
for (i_<%=cid%> = 0; i_<%=cid%> < jsonArray_<%=cid%>.length(); i_<%=cid%>++)
{





