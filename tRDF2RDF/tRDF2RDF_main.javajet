
<%@ jet 
	imports="
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.process.EConnectionType
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.INode
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.Map
    java.util.ArrayList;
	" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
IMetadataTable preMetadata = null;


String defaultGraph = ElementParameterParser.getValue(node, "__DEFAULT_GRAPH__");

String sCheckInputFormatList = ElementParameterParser.getValue(node, "__CHECK_INPUT_FORMAT_LIST__");
String sInputFormat = "";
if (sCheckInputFormatList.equals("true"))
{
	sInputFormat = ElementParameterParser.getValue(node, "__INPUT_FORMAT_LIST__");
}
else
{
	sInputFormat = ElementParameterParser.getValue(node, "__INPUT_FORMAT_TEXT__");
	
	if (sInputFormat.toLowerCase().equals("\"rdf\"") || sInputFormat.toLowerCase().equals("\"rdf/xml\"") || sInputFormat.toLowerCase().equals("\"xml\"") || sInputFormat.toLowerCase().equals("\"rdf/xml-abbrev\""))
	{
		sInputFormat = "RDF/XML";
	}
	else if (sInputFormat.toLowerCase().equals("\"turtle\"") || sInputFormat.toLowerCase().equals("\"ttl\""))
	{
		sInputFormat = "TURTLE";
	}
	else if (sInputFormat.toLowerCase().equals("\"nt\"") || sInputFormat.toLowerCase().equals("\"n-triple\"")) 
	{
		sInputFormat = "N-TRIPLE";
	}
	else if (sInputFormat.toLowerCase().equals("\"n3\"")) 
	{
		sInputFormat = "N3";
	}
	else if (sInputFormat.toLowerCase().equals("\"rdf/json\"") || sInputFormat.toLowerCase().equals("\"json\""))
	{
		sInputFormat = "RDF/JSON";
	}
	else
	{
	 	sInputFormat = "null";
	}
}


String sCheckOutputFormatList = ElementParameterParser.getValue(node, "__CHECK_OUTPUT_FORMAT_LIST__");
String sOutputFormat = "";
if (sCheckOutputFormatList.equals("true"))
{
	sOutputFormat = ElementParameterParser.getValue(node, "__OUTPUT_FORMAT_LIST__");
}
else
{
	sOutputFormat = ElementParameterParser.getValue(node, "__OUTPUT_FORMAT_TEXT__");
	
	if (sOutputFormat.toLowerCase().equals("\"rdf\"") || sOutputFormat.toLowerCase().equals("\"rdf/xml\"") || sOutputFormat.toLowerCase().equals("\"xml\"") || sOutputFormat.toLowerCase().equals("\"rdf/xml-abbrev\""))
	{
		sOutputFormat = "RDF/XML";
	}
	else if (sOutputFormat.toLowerCase().equals("\"turtle\"") || sOutputFormat.toLowerCase().equals("\"ttl\""))
	{
		sOutputFormat = "TURTLE";
	}
	else if (sOutputFormat.toLowerCase().equals("\"nt\"") || sOutputFormat.toLowerCase().equals("\"n-triple\"")) 
	{
		sOutputFormat = "N-TRIPLE";
	}
	else if (sOutputFormat.toLowerCase().equals("\"n3\"")) 
	{
		sOutputFormat = "N3";
	}
	else if (sOutputFormat.toLowerCase().equals("\"rdf/json\"") || sOutputFormat.toLowerCase().equals("\"json\""))
	{
		sOutputFormat = "RDF/JSON";
	}
	else if (sOutputFormat.equals("\"n-triple\""))
	{
		sOutputFormat = "N-TRIPLE";
	}
	else
	{
		sOutputFormat = "null";
	}
}


if ((node.getIncomingConnections()!=null)&&(node.getIncomingConnections().size()>0))
preMetadata = node.getIncomingConnections().get(0).getMetadataTable();
String inRowName = node.getIncomingConnections().get(0).getName();
String outRowName = "";


List<? extends IConnection> outConns = node.getOutgoingConnections();


List<IMetadataColumn> columns = preMetadata.getListColumns();
%>

String rdfInput_<%=cid %> = "";
String defaultGraph_<%=cid %> = <%=defaultGraph %>;

<%
 for (int i = 0; i < columns.size(); i++) 
{
 IMetadataColumn column = columns.get(i);
%>
	rdfInput_<%=cid %> = <%=inRowName %>.RDF;

<% 
}



    for (IConnection conn : outConns) 
    { //oc1 Open	
     if (conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)||conn.getLineStyle().equals(EConnectionType.FLOW_MERGE))
     { //oc2 Open
       outRowName = conn.getName();
  
  //------------------------------Récupération des données-------------------------//
         
%>

reader_<%=cid %> = new StringReader(rdfInput_<%=cid %>);
writer_<%=cid %> = new StringWriter();
model_<%=cid %> = ModelFactory.createDefaultModel();

model_<%=cid %>.read(reader_<%=cid %>,  defaultGraph_<%=cid %>, "<%=sInputFormat %>"); 

model_<%=cid %>.write(writer_<%=cid %>, "<%=sOutputFormat %>"); 

<%=outRowName %>.RDF = writer_<%=cid %>.toString();

<%
 		} // for oc1
 	} // if oc2
%>

nb_line_<%=cid %>++;
