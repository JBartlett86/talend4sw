
<%@ jet 
	imports="
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.process.EConnectionType
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.INode
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.List
    java.util.Map
    java.util.ArrayList;
	" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
IMetadataTable preMetadata = null;


String defaultGraph = ElementParameterParser.getValue(node, "__DEFAULT_GRAPH__");

String sCheckInputFormatList = ElementParameterParser.getValue(node, "__CHECK_INPUT_FORMAT_LIST__");
String sInputFormat = "";
if (sCheckInputFormatList.equals("true"))
{
	sInputFormat = ElementParameterParser.getValue(node, "__INPUT_FORMAT_LIST__");
%>
	inputFormat_<%=cid %> = "<%=sInputFormat%>";
<%
}
else
{
	sInputFormat = ElementParameterParser.getValue(node, "__INPUT_FORMAT_TEXT__");
%>

	if (<%=sInputFormat%>.toLowerCase().equals("rdf") || <%=sInputFormat%>.toLowerCase().equals("rdf/xml") || <%=sInputFormat%>.toLowerCase().equals("xml") || <%=sInputFormat%>.toLowerCase().equals("application/rdf+xml"))
	{
		inputFormat_<%=cid %> = "RDF/XML";
	}
	else if (<%=sInputFormat%>.toLowerCase().equals("turtle") || <%=sInputFormat%>.toLowerCase().equals("ttl") || <%=sInputFormat%>.toLowerCase().equals("text/turtle"))
	{
		inputFormat_<%=cid %> = "TURTLE";
	}
	else if (<%=sInputFormat%>.toLowerCase().equals("nt") || <%=sInputFormat%>.toLowerCase().equals("n-triple") || <%=sInputFormat%>.toLowerCase().equals("text/plain")) 
	{
		inputFormat_<%=cid %> = "N-TRIPLE";
	}
	else if (<%=sInputFormat%>.toLowerCase().equals("n3") || <%=sInputFormat%>.toLowerCase().equals("text/rdf+n3")) 
	{
		inputFormat_<%=cid %> = "N3";
	}
	else if (<%=sInputFormat%>.toLowerCase().equals("rdf/json") || <%=sInputFormat%>.toLowerCase().equals("json") || <%=sInputFormat%>.toLowerCase().equals("application/json"))
	{
		inputFormat_<%=cid %> = "RDF/JSON";
	}
	else
	{
		inputFormat_<%=cid %> = "null";
	}
<%
}


String sCheckOutputFormatList = ElementParameterParser.getValue(node, "__CHECK_OUTPUT_FORMAT_LIST__");
String sOutputFormat = "";
if (sCheckOutputFormatList.equals("true"))
{
	sOutputFormat = ElementParameterParser.getValue(node, "__OUTPUT_FORMAT_LIST__");
%>
	outputFormat_<%=cid %> = "<%=sOutputFormat%>";
<%
}
else
{
	sOutputFormat = ElementParameterParser.getValue(node, "__OUTPUT_FORMAT_TEXT__");
%>

	if (<%=sOutputFormat%>.toLowerCase().equals("rdf") || <%=sOutputFormat%>.toLowerCase().equals("rdf/xml") || <%=sOutputFormat%>.toLowerCase().equals("xml") || <%=sOutputFormat%>.toLowerCase().equals("application/rdf+xml"))
	{
		outputFormat_<%=cid %> = "RDF/XML";
	}
	else if (<%=sOutputFormat%>.toLowerCase().equals("turtle") || <%=sOutputFormat%>.toLowerCase().equals("ttl") || <%=sOutputFormat%>.toLowerCase().equals("text/turtle"))
	{
		outputFormat_<%=cid %> = "TURTLE";
	}
	else if (<%=sOutputFormat%>.toLowerCase().equals("nt") || <%=sOutputFormat%>.toLowerCase().equals("n-triple") || <%=sOutputFormat%>.toLowerCase().equals("text/plain")) 
	{
		outputFormat_<%=cid %> = "N-TRIPLE";
	}
	else if (<%=sOutputFormat%>.toLowerCase().equals("n3") || <%=sOutputFormat%>.toLowerCase().equals("text/rdf+n3")) 
	{
		outputFormat_<%=cid %> = "N3";
	}
	else if (<%=sOutputFormat%>.toLowerCase().equals("rdf/json") || <%=sOutputFormat%>.toLowerCase().equals("json") || <%=sOutputFormat%>.toLowerCase().equals("application/json"))
	{
		outputFormat_<%=cid %> = "RDF/JSON";
	}
	else
	{
		outputFormat_<%=cid %> = "null";
	}
	
<%
}


if ((node.getIncomingConnections()!=null)&&(node.getIncomingConnections().size()>0))
preMetadata = node.getIncomingConnections().get(0).getMetadataTable();
String inRowName = node.getIncomingConnections().get(0).getName();
String outRowName = "";


List<? extends IConnection> outConns = node.getOutgoingConnections();


List<IMetadataColumn> columns = preMetadata.getListColumns();
%>

String rdfInput_<%=cid %> = "";
String defaultGraph_<%=cid %> = <%=defaultGraph %>;

<%
 for (int i = 0; i < columns.size(); i++) 
{
 IMetadataColumn column = columns.get(i);
%>
	rdfInput_<%=cid %> = <%=inRowName %>.RDF;

<% 
}



    for (IConnection conn : outConns) 
    { //oc1 Open	
     if (conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)||conn.getLineStyle().equals(EConnectionType.FLOW_MERGE))
     { //oc2 Open
       outRowName = conn.getName();
  
  //------------------------------Récupération des données-------------------------//
         
%>

reader_<%=cid %> = new StringReader(rdfInput_<%=cid %>);
writer_<%=cid %> = new StringWriter();
model_<%=cid %> = ModelFactory.createDefaultModel();

model_<%=cid %>.read(reader_<%=cid %>,  defaultGraph_<%=cid %>, inputFormat_<%=cid %>); 

model_<%=cid %>.write(writer_<%=cid %>, outputFormat_<%=cid %>); 

<%=outRowName %>.RDF = writer_<%=cid %>.toString();

<%
 		} // for oc1
 	} // if oc2
%>

nb_line_<%=cid %>++;
